name: Build
on:
  schedule:
  - cron: '0 0 * * *'
  push:
    branches:
    - master
  pull_request:
jobs:
  build:
    name: "Build with Emsdk"
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || !contains(github.event.head_commit.message, '[ci skip]')
    steps:
    - name: "Set up Emsdk"
      run: |
        mkdir $HOME/emsdk
        git clone --depth 1 https://github.com/emscripten-core/emsdk.git $HOME/emsdk
        $HOME/emsdk/emsdk update-tags
        $HOME/emsdk/emsdk install latest
        $HOME/emsdk/emsdk activate latest
        echo ::set-env name=PATH::$HOME/emsdk:$PATH
    - name: "Set up CMake"
      run: |
        mkdir $HOME/cmake
        wget -qO- https://github.com/Kitware/CMake/releases/download/v3.16.0/cmake-3.16.0-Linux-x86_64.tar.gz | tar -xzC $HOME/cmake --strip-components 1
        echo ::set-env name=PATH::$HOME/cmake/bin:$PATH
    - name: "Check out repository"
      uses: actions/checkout@v1
      with:
        submodules: true
    - name: "Set up repository"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git remote set-url origin "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        git fetch origin
        if [ -z "$GITHUB_HEAD_REF" ]; then
          # If not a PR, undo detached head
          git checkout "${GITHUB_REF:11}"
        fi
        git submodule update --init --remote --merge
        git submodule foreach 'git submodule update --init'
        cd ./wabt
        git log -n1
        cd ..
    - name: "Determine version"
      run: |
        npm install
        VERSION=`node scripts/version`
        echo ::set-env name=VERSION::$VERSION
        if [[ $VERSION != *nightly* ]]; then
          echo "Building release v$VERSION ...";
          TAG=`node scripts/version tag`
          echo "Resetting to $TAG ..."
          cd ./wabt
          git reset --hard "$TAG"
          git clean -f
          git log -n1
          cd ..
          echo ::set-env name=RELEASE::1
        else
          echo "Building nightly v$VERSION ...";
          echo ::set-env name=RELEASE::
        fi
    - name: "Build wabt.js"
      run: |
        cd ./wabt
        source $HOME/emsdk/emsdk_env.sh
        emcc --version
        make emscripten-release
        cp out/emscripten/Release/libwabt.js ../index.js
        echo '#!/usr/bin/env node' > ../bin/wasm2c
        cat out/emscripten/Release/wasm2c.js >> ../bin/wasm2c
        cp out/emscripten/Release/wasm2wat.js ../bin/wasm2wat
        cp out/emscripten/Release/wast2json.js ../bin/wast2json
        cp out/emscripten/Release/wat2wasm.js ../bin/wat2wasm
        cp out/emscripten/Release/wasm-decompile.js ../bin/wasm-decompile
        cp out/emscripten/Release/wasm-interp.js ../bin/wasm-interp
        cp out/emscripten/Release/wasm-objdump.js ../bin/wasm-objdump
        cp out/emscripten/Release/wasm-opcodecnt.js ../bin/wasm-opcodecnt
        cp out/emscripten/Release/wasm-strip.js ../bin/wasm-strip
        cp out/emscripten/Release/wasm-validate.js ../bin/wasm-validate
        cp out/emscripten/Release/wat-desugar.js ../bin/wat-desugar
        cd ..
    - name: "Test wabt.js"
      run: |
        node ./tests
        node ./bin/wasm2c --help
        node ./bin/wasm2wat --help
        node ./bin/wast2json --help
        node ./bin/wat2wasm --help
        node ./bin/wasm-decompile --help
        node ./bin/wasm-interp --help
        node ./bin/wasm-objdump --help
        node ./bin/wasm-opcodecnt --help
        node ./bin/wasm-strip --help
        node ./bin/wasm-validate --help
        node ./bin/wasm-desugar --help
    # - name: "Push changes to GitHub"
    #   if: github.event_name == 'schedule' && matrix.emsdk == 'tot'
    #   run: |
    #     git add ./wabt ./index.js
    #     npm version $VERSION --no-git-tag-version --force
    #     if [ $RELEASE ]; then
    #       echo "Committing release ("$VERSION") ..."
    #       git add ./package.json ./package-lock.json
    #       git commit -m "Release v$VERSION"
    #     else
    #       echo "Committing nightly ("$VERSION") ..."
    #       git commit -m "Nightly v$VERSION [ci skip]"
    #     fi
    #     git push -u origin master
    #     echo "Creating tag v$VERSION ..."
    #     git tag "v$VERSION"
    #     git push -u origin "v$VERSION"
    # - name: "Publish to npm"
    #   if: github.event_name == 'schedule' && matrix.emsdk == 'tot'
    #   env:
    #     NPM_REGISTRY: "registry.npmjs.org"
    #     NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    #   run: |
    #     npm config set "//${NPM_REGISTRY}/:_authToken=${NPM_AUTH_TOKEN}"
    #     if [ $RELEASE ]; then
    #       echo "Publishing release ..."
    #       npm publish
    #     else
    #       echo "Publishing nightly ..."
    #       npm publish --tag nightly
    #     fi
